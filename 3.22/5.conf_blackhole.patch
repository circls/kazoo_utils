From ff9e7f54498a28e26c050b2e681736e035f27430 Mon Sep 17 00:00:00 2001
From: Kirill Sysoev <kirill.sysoev@gmail.com>
Date: Tue, 22 Dec 2015 00:27:32 +0300
Subject: [PATCH] KAZOO-4458: As a blackhole/bh_conference module user I would
 like to listen to conference.command.*

---
 applications/blackhole/doc/bindings.md               | 1 +
 applications/blackhole/doc/index.md                  | 7 +++++++
 applications/blackhole/src/modules/bh_conference.erl | 8 ++++++--
 3 files changed, 14 insertions(+), 2 deletions(-)

diff --git a/applications/blackhole/doc/bindings.md b/applications/blackhole/doc/bindings.md
index d9d9219..80d8215 100644
--- a/applications/blackhole/doc/bindings.md
+++ b/applications/blackhole/doc/bindings.md
@@ -18,6 +18,7 @@ Here are a non-exhaustive list of bindings provided per default callback module:
     * `call.CHANNEL_BRIDGE.*`
 * `bh_conference`:
     * `conference.event.*`
+    * `conference.command.*`
 * `bh_fax`:
     * `fax.status.*`
 
diff --git a/applications/blackhole/doc/index.md b/applications/blackhole/doc/index.md
index f50a677..be21d2a 100644
--- a/applications/blackhole/doc/index.md
+++ b/applications/blackhole/doc/index.md
@@ -37,7 +37,14 @@ From here, you can write your own Javascript callbacks, triggered everytime a re
       socket.emit('subscribe', { account_id: '{ACCOUNT_ID}', auth_token: '{AUTH_TOKEN}', binding: 'call.CHANNEL_ANSWER.*' });
       socket.emit('subscribe', { account_id: '{ACCOUNT_ID}', auth_token: '{AUTH_TOKEN}', binding: 'call.CHANNEL_DESTROY.*' });
       socket.emit('subscribe', { account_id: '{ACCOUNT_ID}', auth_token: '{AUTH_TOKEN}', binding: 'conference.event.*' });
+      socket.emit('subscribe', { account_id: '{ACCOUNT_ID}', auth_token: '{AUTH_TOKEN}', binding: 'conference.command.{CONFERENCE_ID}' });
 
+      socket.on('mute_participant', function (data) {
+        console.log(data);
+      });
+      socket.on('unmute_participant', function (data) {
+        console.log(data);
+      });
       socket.on('participants_event', function (data) {
         console.log(data);
       });
diff --git a/applications/blackhole/src/modules/bh_conference.erl b/applications/blackhole/src/modules/bh_conference.erl
index 80a337f..4b6f6a6 100644
--- a/applications/blackhole/src/modules/bh_conference.erl
+++ b/applications/blackhole/src/modules/bh_conference.erl
@@ -26,14 +26,18 @@ handle_event(Context, EventJObj) ->
 
 -spec add_amqp_binding(ne_binary(), bh_context:context()) -> 'ok'.
 add_amqp_binding(<<"conference.event.", ConfId/binary>>, _Context) ->
-    blackhole_listener:add_binding('conference', [{'restrict_to', [{'conference', ConfId}]}]);
+    blackhole_listener:add_binding('conference', [{'conference', ConfId}, {'restrict_to', ['event']}]);
+add_amqp_binding(<<"conference.command.", ConfId/binary>>, _Context) ->
+    blackhole_listener:add_binding('conference', [{'conference', ConfId}, {'restrict_to', ['command']}]);
 add_amqp_binding(Binding, _Context) ->
     lager:debug("unmatched binding ~p", [Binding]),
     'ok'.
 
 -spec rm_amqp_binding(ne_binary(), bh_context:context()) -> 'ok'.
 rm_amqp_binding(<<"conference.event.", ConfId/binary>>, _Context) ->
-    blackhole_listener:remove_binding('conference', [{'restrict_to', [{'conference', ConfId}]}]);
+    blackhole_listener:remove_binding('conference', [{'conference', ConfId}, {'restrict_to', ['event']}]);
+rm_amqp_binding(<<"conference.command.", ConfId/binary>>, _Context) ->
+    blackhole_listener:remove_binding('conference', [{'conference', ConfId}, {'restrict_to', ['command']}]);
 rm_amqp_binding(Binding, _Context) ->
     lager:debug("unmatched binding ~p", [Binding]),
     'ok'.
